#!/bin/bash

MASON_REPO=${MASON_REPO-"mason-org/mason-registry"}
MASON_CACHE_DIR=${MASON_CACHE_DIR-"$XDG_CACHE_HOME/mason"}
MASON_DATA_DIR=${MASON_DATA_DIR-"$XDG_DATA_HOME/mason"}

if [[ ! -d $MASON_CACHE_DIR ]]; then
	mkdir -p "$MASON_CACHE_DIR"
fi

if [[ ! -d $MASON_DATA_DIR ]]; then
	mkdir -p "$MASON_DATA_DIR"
fi

if [[ ! -d $MASON_DATA_DIR/bin ]]; then
	mkdir -p "$MASON_DATA_DIR"/bin
fi

if [[ ! -d $MASON_DATA_DIR/packages ]]; then
	mkdir -p "$MASON_DATA_DIR"/packages
fi

function download_github_release {
	local repo=$1
	local asset=$2
	local version=${3-latest}
	local dir=${4-./}
	[[ $version != "latest" ]] && version=tags/$version
	local -r download_link="$(
		curl -s https://api.github.com/repos/"$repo"/releases/"$version" |
			jq -r --arg asset "$asset" '.assets[] | select(.name==$asset).browser_download_url'
	)"
	curl -s -L -o "$dir/$asset" -H "Accept: application/octet-stream" -H "Authorization: token $MASON_GITHUB_TOKEN" "$download_link"
}

function download_registry {
	cd "$MASON_CACHE_DIR"
	download_github_release "$MASON_REPO" checksums.txt
	if ! sha256sum --status -c ./checksums.txt --ignore-missing; then
		download_github_release "$MASON_REPO" registry.json.zip
		unzip -q -o -d "$MASON_CACHE_DIR" ./registry.json.zip && rm "$MASON_CACHE_DIR"/registry.json.zip
	fi
	rm checksums.txt
}

function parse_pkg_source_id {
	local input=${1#pkg:}
	local type=${input%%/*}
	local fullname=${input#*/}
	local version=${fullname#*@}
	local package=${fullname%@*}
	package=${package//%40/@}
	echo "$type $package $version"
}

function install {
	local name=$1
	[[ -z $name ]] && name=$(
		jq -r '.[] | "\(.name)\t\(.categories | join(", "))\t\(.languages | join(", "))"' <"$MASON_CACHE_DIR"/registry.json |
			column -t -s $'\t' |
			fzf |
			awk '{ print $1 }'
	)

	[[ -z $name ]] && exit 1

	local -r pkg=$(jq <"$MASON_CACHE_DIR"/registry.json --arg name "$name" '.[] | select(.name==$name)')

	[[ -z $pkg ]] && echo "mason: '$name' not found" && exit 1

	read -r type package version <<<"$(parse_pkg_source_id "$(jq -r '.source.id' <<<"$pkg")")"

	if [[ ! -d $MASON_DATA_DIR/packages/$package ]]; then
		mkdir -p "$MASON_DATA_DIR"/packages/"$package"
	fi

	cd "$MASON_DATA_DIR"/packages/"$package"

	case $type in
	npm) npm install "$package"@"$version" ;;
	*) echo "mason: $type not implemented" && exit 1 ;;
	esac

	jq -r '.bin | to_entries[] | "\(.key) \(.value)"' <<<"$pkg" | while read -r key value; do
		local type=${value%:*}
		local package=${value#*:}
		local bin_path=""

		case $type in
		npm) bin_path=./node_modules/.bin/"$package" ;;
		*) "mason: $type not implemented" && exit 1 ;;
		esac

		ln -sf "$(realpath "$bin_path")" "$MASON_DATA_DIR"/bin/"$key"
	done
}

(($# == 0)) && exit 1

while [[ $# -gt 0 ]]; do
	arg=$1
	shift
	case $arg in
	install)
		name=$1
		shift
		[[ ! -f $MASON_CACHE_DIR/registry.json ]] && download_registry
		install "$name"
		;;
	update-repo) download_registry ;;
	*)
		echo "Unknown argument: $1"
		exit 1
		;;
	esac
done
