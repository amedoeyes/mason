#!/bin/bash

MASON_REPO=${MASON_REPO-"mason-org/mason-registry"}
MASON_CACHE_DIR=${MASON_CACHE_DIR-"$XDG_CACHE_HOME/mason"}
MASON_DATA_DIR=${MASON_DATA_DIR-"$XDG_DATA_HOME/mason"}

if [[ ! -d $MASON_CACHE_DIR ]]; then
	mkdir -p "$MASON_CACHE_DIR"
fi

if [[ ! -d $MASON_DATA_DIR ]]; then
	mkdir -p "$MASON_DATA_DIR"
fi

if [[ ! -d $MASON_DATA_DIR/bin ]]; then
	mkdir -p "$MASON_DATA_DIR"/bin
fi

if [[ ! -d $MASON_DATA_DIR/packages ]]; then
	mkdir -p "$MASON_DATA_DIR"/packages
fi

function download_github_release {
	local repo=$1
	local asset=$2
	local version=${3-latest}
	local dir=${4-./}
	[[ $version != "latest" ]] && version=tags/$version
	local -r download_link="$(
		curl -s https://api.github.com/repos/"$repo"/releases/"$version" |
			jq -r --arg asset "$asset" '.assets[] | select(.name==$asset).browser_download_url'
	)"
	curl -s -L -o "$dir/$asset" -H "Accept: application/octet-stream" -H "Authorization: token $MASON_GITHUB_TOKEN" "$download_link"
}

function download_registry {
	cd "$MASON_CACHE_DIR"
	download_github_release "$MASON_REPO" checksums.txt
	if ! sha256sum --status -c ./checksums.txt --ignore-missing; then
		download_github_release "$MASON_REPO" registry.json.zip
		unzip -q -o -d "$MASON_CACHE_DIR" ./registry.json.zip && rm "$MASON_CACHE_DIR"/registry.json.zip
	fi
	rm checksums.txt
}

download_registry

function install {
	type=$1
	package=$2
	version=$3

	if [[ ! -d $MASON_DATA_DIR/packages/$package ]]; then
		mkdir -p "$MASON_DATA_DIR"/packages/"$package"
	fi

	cd "$MASON_DATA_DIR"/packages/"$package"

	case "$type" in
	npm) npm install "$package"@"$version" ;;
	*) exit ;;
	esac
}

function link {
	bins=$1
	echo "$bins" | while read -r key value; do
		type=${value%:*}
		installee=${value#*:}
		bin_path=""
		case "$type" in
		npm) bin_path=./node_modules/.bin/"$installee" ;;
		*) exit ;;
		esac
		ln -sf "$(realpath "$bin_path")" "$MASON_DATA_DIR"/bin/"$key"
	done
}

function parse_pkg_source_id {
	function parse_pkg_source_id {
		local input=${1#pkg:}
		local type=${input%%/*}
		local fullname=${input#*/}
		local version=${fullname##*@}
		local package=${fullname%@"$version"}
		package=${package//%40/@}
		echo "$type $package $version"
	}
}

name=$1
if [[ -z $name ]]; then
	name=$(
		jq -r '.[] | "\(.name)\t\(.categories | join(", "))\t\(.languages | join(", "))"' <"$MASON_CACHE_DIR"/registry.json |
			column -t -s $'\t' |
			fzf |
			awk '{ print $1 }'
	)
fi

[[ -z $name ]] && exit 1

pkg=$(jq <"$MASON_CACHE_DIR"/registry.json --arg name "$name" '.[] | select(.name==$name)')

[[ -z $pkg ]] && echo "mason: '$name' not found" && exit 1

pkg_source_id=$(echo "$pkg" | jq -r '.source.id[4:]')

parse_pkg_source_id "$pkg_source_id"
read -r type package version <<<"$(parse_pkg_source_id "$pkg_source_id")"

install "$type" "$package" "$version"
link "$(echo "$pkg" | jq -r '.bin | to_entries[] | "\(.key) \(.value)"')"
